import 'package:ban_hang/services/owner_services/printer_service.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:esc_pos_printer/esc_pos_printer.dart';
import 'package:esc_pos_utils/esc_pos_utils.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:phone_number/phone_number.dart';

class FacebookLiveService {

  final PhoneNumberUtil _phoneNumberUtil = PhoneNumberUtil();

  Future<List<Map<String, dynamic>>> getLivestreams(String pageId,
      String accessToken) async {
    final url = Uri.parse(
        'https://graph.facebook.com/v19.0/$pageId/live_videos?access_token=$accessToken');
    final res = await http.get(url);

    if (res.statusCode == 200) {
      final data = json.decode(res.body);
      final liveVideos = data['data'] as List;
      return liveVideos.map((e) => Map<String, dynamic>.from(e)).toList();
    } else {
      throw Exception("Kh√¥ng th·ªÉ l·∫•y livestream");
    }
  }

  Future<List<Map<String, dynamic>>> getComments(String livestreamId,
      String accessToken) async {
    final url = Uri.parse(
      'https://graph.facebook.com/v19.0/$livestreamId/comments?fields=from{name,picture{url}},message,created_time&access_token=$accessToken',
    );
    final res = await http.get(url);
    if (res.statusCode == 200) {
      final data = json.decode(res.body);
      final comments = data['data'] as List;
      return comments.map((c) => Map<String, dynamic>.from(c)).toList();
    } else {
      throw Exception("Kh√¥ng th·ªÉ l·∫•y comment");
    }
  }


  /// L·ªçc comment c√≥ ch·ª©a s·ªë ƒëi·ªán tho·∫°i (d·ª±a v√†o regex + chu·∫©n h√≥a n·∫øu c·∫ßn)
  Future<List<Map<String, dynamic>>> filterCommentsWithPhoneNumbers(
      List<Map<String, dynamic>> comments) async {
    final List<Map<String, dynamic>> result = [];

    // Regex t√¨m c√°c c·ª•m t·ª´ c√≥ th·ªÉ l√† s·ªë ƒëi·ªán tho·∫°i, cho ph√©p d·∫•u c√°ch v√† g·∫°ch ngang
    final rawPhoneRegex = RegExp(r'[\d\s\-\+]{8,20}');

    for (final comment in comments) {
      final text = comment['message']?.toString() ?? '';

      final matches = rawPhoneRegex.allMatches(text);

      for (final match in matches) {
        String rawPhone = match.group(0)!;

        // Lo·∫°i b·ªè d·∫•u c√°ch, g·∫°ch ngang, ch·∫•m‚Ä¶ => ch·ªâ gi·ªØ l·∫°i ch·ªØ s·ªë v√† d·∫•u +
        String cleanedPhone = rawPhone.replaceAll(RegExp(r'[^\d+]'), '');

        String normalizedPhone = cleanedPhone;

        // N·∫øu l√† s·ªë VN vi·∫øt 0xxxxx th√¨ chuy·ªÉn th√†nh +84xxxx
        if (cleanedPhone.startsWith('0') && cleanedPhone.length >= 9 &&
            cleanedPhone.length <= 10) {
          normalizedPhone = '+84${cleanedPhone.substring(1)}';
        } else if (cleanedPhone.startsWith('84') && cleanedPhone.length == 11) {
          normalizedPhone = '+$cleanedPhone';
        }

        try {
          final parsed = await _phoneNumberUtil.parse(normalizedPhone);
          final isValid = await _phoneNumberUtil.validate(
            normalizedPhone,
            regionCode: parsed.regionCode ?? 'VN',
          );

          if (isValid) {
            result.add(comment);
            break; // comment h·ª£p l·ªá r·ªìi, kh√¥ng c·∫ßn ki·ªÉm tra ti·∫øp s·ªë kh√°c
          }
        } catch (_) {
          // N·∫øu parse l·ªói th√¨ b·ªè qua
        }
      }
    }

    return result;
  }

  Future<void> createCustomerRecordsIfNotExists({
    required String fbid,
    required String name,
    required String? avatarUrl,
    required String creatorId,
  }) async {
    final firestore = FirebaseFirestore.instance;

    // L·∫•y shopid c·ªßa user hi·ªán t·∫°i t·ª´ b·∫£ng users
    final currentUserDoc =
    await firestore.collection('users').doc(creatorId).get();
    final shopId = currentUserDoc.data()?['shopid'];
    if (shopId == null) {
      throw Exception('Kh√¥ng t√¨m th·∫•y shopid c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i');
    }

    // 1. Ki·ªÉm tra / t·∫°o kh√°ch h√†ng trong facebook_customer
    DocumentReference customerRef;
    final fbCustomerQuery = await firestore
        .collection('facebook_customer')
        .where('fbid', isEqualTo: fbid)
        .limit(1)
        .get();

    if (fbCustomerQuery.docs.isEmpty) {
      // Ch∆∞a t·ªìn t·∫°i ‚Üí t·∫°o m·ªõi
      final newDocRef = firestore.collection('facebook_customer').doc();
      await newDocRef.set({
        'name': name,
        'fbid': fbid,
        'avatarUrl': avatarUrl,
        'status': 'B√¨nh th∆∞·ªùng',
        'creatorId': creatorId,
        'createdAt': Timestamp.now(),
        'phone_verified': true,
        'role': 'customer',
        'address': null,
        'phone': null,
      });
      customerRef = newDocRef;
    } else {
      // ƒê√£ t·ªìn t·∫°i ‚Üí l·∫•y reference
      customerRef = fbCustomerQuery.docs.first.reference;
    }

    // 2. Ki·ªÉm tra trong shop_facebook_customer theo shopid + customerRef
    final shopFbCustomerQuery = await firestore
        .collection('shop_facebook_customer')
        .where('customerRef', isEqualTo: customerRef)
        .where('shopid', isEqualTo: shopId)
        .limit(1)
        .get();

    if (shopFbCustomerQuery.docs.isEmpty) {
      // Ch∆∞a t·ªìn t·∫°i ‚Üí th√™m m·ªõi
      await firestore.collection('shop_facebook_customer').add({
        'customerRef': customerRef,
        'shopid': shopId,
        'createdAt': Timestamp.now(),
      });
    }
  }


  Future<List<Map<String, dynamic>>> loadComments(String livestreamId,
      String accessToken,) async {
    // Step 1: Get raw comments from Facebook
    final comments = await getComments(livestreamId, accessToken);

    // Step 2: Extract unique Facebook user IDs from comments
    final userIds = comments
        .map((c) => c['from']?['id'])
        .whereType<String>()
        .toSet();

    if (userIds.isEmpty) return comments;

    // Step 3: Fetch corresponding users from Firestore
    final usersSnapshot = await FirebaseFirestore.instance
        .collection('users')
        .where(FieldPath.documentId, whereIn: userIds.toList())
        .get();

    final userMap = {
      for (var doc in usersSnapshot.docs) doc.id: doc.data(),
    };

    // Step 4: Assign status from Firestore to comments
    for (var comment in comments) {
      final fbId = comment['from']?['id'];
      if (fbId != null && userMap.containsKey(fbId)) {
        comment['status'] = userMap[fbId]?['status'];
      }
    }

    return comments;
  }

  Future<void> printComment({
    required String host, // IP m√°y in
    required int port, // C·ªïng m√°y in, th∆∞·ªùng l√† 9100
    required String userId,
    required String name,
    required String time,
    required String message,
  }) async {
    final profile = await CapabilityProfile.load();
    final printer = NetworkPrinter(PaperSize.mm58, profile);

    final PosPrintResult res = await printer.connect(host, port: port);

    if (res == PosPrintResult.success) {
      printer.text('--- Th√¥ng tin comment ---',
          styles: PosStyles(align: PosAlign.center, bold: true));
      printer.text('ID: $userId');
      printer.text('T√™n: $name');
      printer.text('Th·ªùi gian: $time');
      printer.text('N·ªôi dung: $message');
      printer.hr();
      printer.text('HHT',
          styles: PosStyles(align: PosAlign.center, bold: true));
      printer.cut();
      printer.disconnect();
    } else {

      throw Exception('K·∫øt n·ªëi m√°y in th·∫•t b·∫°i: $res');

    }
  }

  Future<Map<String, dynamic>?> getPrinterForCurrentShop() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return null;

    final firestore = FirebaseFirestore.instance;

    // üîπ L·∫•y shopid t·ª´ b·∫£ng users
    final userDoc = await firestore.collection('users').doc(user.uid).get();
    final shopId = userDoc.data()?['shopid'];
    if (shopId == null) {
      debugPrint("‚ö†Ô∏è User ch∆∞a c√≥ shopid");
      return null;
    }

    // üîπ L·∫•y m√°y in c√≥ shopid tr√πng kh·ªõp
    final query = await firestore
        .collection('printer')
        .where('shopid', isEqualTo: shopId)
        .limit(1)
        .get();

    if (query.docs.isNotEmpty) {
      return query.docs.first.data() as Map<String, dynamic>;
    }

    debugPrint("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m√°y in cho shopid: $shopId");
    return null;
  }

  Future<String> createOrderFromComment({
    required String userId,
    required String name,
    required String? avatarUrl,
    required String time,
    required String message,
  }) async {
    final currentUserId = FirebaseAuth.instance.currentUser?.uid;
    if (currentUserId == null) throw Exception('Ch∆∞a ƒëƒÉng nh·∫≠p');

    // 1. T·∫°o customer record n·∫øu ch∆∞a c√≥
    await createCustomerRecordsIfNotExists(
      fbid: userId,
      name: name,
      avatarUrl: avatarUrl,
      creatorId: currentUserId,
    );

    // 2. L·∫•y m√°y in theo shopid
    final printerConfig = await getPrinterForCurrentShop();

    if (printerConfig != null) {
      final host = printerConfig['IP'] ?? '192.168.1.100';
      final port = (printerConfig['Port'] is int) ? printerConfig['Port'] : 9100;

      try {
        await printComment(
          host: host,
          port: port,
          userId: userId,
          name: name,
          time: time,
          message: message,
        );
        return "T·∫°o ƒë∆°n th√†nh c√¥ng"; // ‚úÖ c√≥ in th√†nh c√¥ng
      } catch (e) {
        debugPrint('‚ùå L·ªói khi in: $e');
        return "Th√™m kh√°ch th√†nh c√¥ng, in th·∫•t b·∫°i. H√£y ki·ªÉm tra c√†i ƒë·∫∑t m√°y in"; // ‚úÖ in l·ªói
      }
    } else {
      debugPrint('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m√°y in cho shop hi·ªán t·∫°i, b·ªè qua in');
      return "Th√™m kh√°ch th√†nh c√¥ng, b·∫°n c√≥ th·ªÉ in ƒë∆°n n·∫øu c√†i ƒë·∫∑t m√°y in trong c√†i ƒë·∫∑t"; // ‚úÖ kh√¥ng c√≥ m√°y in
    }

    // Sau n√†y b·∫°n c√≥ th·ªÉ b·ªï sung t·∫°o ƒë∆°n h√†ng v√†o ƒë√¢y n·∫øu c·∫ßn
  }


}
