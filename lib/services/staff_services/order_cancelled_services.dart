import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:excel/excel.dart';
import 'package:path_provider/path_provider.dart';

class OrderCancelledServices {
  /// L·∫•y ƒë∆°n h√†ng b·ªã h·ªßy theo kho·∫£ng ng√†y
  static Future<List<Map<String, dynamic>>> getOrders({
    DateTime? startDate,
    DateTime? endDate,
  }) async {
    final firestore = FirebaseFirestore.instance;

    Query query = firestore.collection('OrderCancelled');

    if (startDate != null && endDate != null) {
      final start = DateTime(startDate.year, startDate.month, startDate.day);
      final end = DateTime(endDate.year, endDate.month, endDate.day)
          .add(const Duration(days: 1));
      query = query
          .where('cancelledAt', isGreaterThanOrEqualTo: start)
          .where('cancelledAt', isLessThan: end);
    }

    final snapshot = await query.get();

    List<Map<String, dynamic>> results = [];

    for (var doc in snapshot.docs) {
      final data = doc.data()! as Map<String, dynamic>;

      final orderedId = data['orderedProductsId'];

      // üéØ L·∫•y OrderedProducts g·ªëc
      final orderDoc = await firestore.collection('OrderedProducts').doc(orderedId).get();
      if (!orderDoc.exists) continue;

      final orderData = orderDoc.data()!;
      final userId = orderData['userId'];
      final productId = orderData['productId'];

      // üéØ L·∫•y user
      final userDoc = await firestore.collection('users').doc(userId).get();
      final userData = userDoc.exists ? userDoc.data()! : {};

      // üéØ L·∫•y s·∫£n ph·∫©m
      final productDoc = await firestore.collection('Products').doc(productId).get();
      final productData = productDoc.exists ? productDoc.data()! : {};

      results.add({
        'orderId': orderedId,
        'cancelledAt': data['cancelledAt'],
        'quantity': orderData['quantity'],
        'total': orderData['total'],
        'address': userData['address'] ?? '',
        'customerName': userData['name'] ?? '',
        'phone': userData['phone'] ?? '',
        'productName': productData['name'] ?? '',
      });
    }

    return results;
  }


  /// T·∫°o file Excel v√† tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n file
  static Future<String> exportOrdersToExcel({
    required List<Map<String, dynamic>> orders,
    required DateTime? startDate,
    required DateTime? endDate,
  }) async {
    final excel = Excel.createExcel();
    final sheet = excel['CancelledOrders'];

    // Header ti·∫øng Vi·ªát
    sheet.appendRow([
      'ID ƒê·∫∑t h√†ng',
      'T√™n kh√°ch h√†ng',
      'SDT',
      'ƒê·ªãa ch·ªâ',
      'T√™n s·∫£n ph·∫©m',
      'S·ªë l∆∞·ª£ng',
      'T·ªïng gi√° tr·ªã ƒë∆°n h√†ng',
      'Ng√†y ƒë∆°n h√†ng b·ªã h·ªßy'
    ]);

    for (var order in orders) {
      final cancelledAt = order['cancelledAt'] is Timestamp
          ? (order['cancelledAt'] as Timestamp).toDate()
          : order['cancelledAt'] as DateTime;

      sheet.appendRow([
        order['orderId'],
        order['customerName'],
        order['phone'],
        order['address'],
        order['productName'],
        order['quantity'].toString(),
        order['total'].toString(),
        '${cancelledAt.day}/${cancelledAt.month}/${cancelledAt.year}',
      ]);
    }

    // T·∫°o t√™n file theo ng√†y l·ªçc
    String datePart = '';
    if (startDate != null && endDate != null) {
      if (startDate.year == endDate.year &&
          startDate.month == endDate.month &&
          startDate.day == endDate.day) {
        datePart =
        'Ng√†y_${startDate.year}-${startDate.month}-${startDate.day}';
      } else {
        datePart =
        '_T·ª´_ng√†y_${startDate.year}-${startDate.month}-${startDate.day}_ƒë·∫øn_ng√†y_${endDate.year}-${endDate.month}-${endDate.day}';
      }
    } else {
      final now = DateTime.now();
      datePart = '_${now.year}-${now.month}-${now.day}';
    }

    final dir = await getApplicationDocumentsDirectory();
    final path = '${dir.path}/ƒê∆°n_h√†ng_b·ªã_h·ªßy$datePart.xlsx';

    final fileBytes = excel.save();
    final file = File(path)
      ..createSync(recursive: true)
      ..writeAsBytesSync(fileBytes!);

    print('‚úÖ File ƒë√£ l∆∞u: $path');
    return path;
  }
}
