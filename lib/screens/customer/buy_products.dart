
import 'package:ban_hang/screens/customer/edit_information_for_order.dart';
import 'package:ban_hang/screens/customer/home_customer.dart';
import 'package:ban_hang/services/customer_services/stripe_payment_service.dart';
import 'package:flutter/material.dart';
import 'package:ban_hang/utils/message.dart';
import 'package:ban_hang/screens/auth/signup_information.dart';
import 'package:ban_hang/services/customer_services/buy_products_services.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class BuyProductsScreen extends StatefulWidget {
  final List<Map<String, dynamic>> selectedItems;

  const BuyProductsScreen({super.key, required this.selectedItems});

  @override
  State<BuyProductsScreen> createState() => _BuyProductsScreenState();
}

class _BuyProductsScreenState extends State<BuyProductsScreen> {
  String paymentMethod = 'Thanh to√°n khi nh·∫≠n h√†ng';
  bool _isSubmitting = false;
  bool _isEditing = false;
  Map<String, dynamic>? userData;

  @override
  void initState() {
    super.initState();
    print('üõí selectedItems truy·ªÅn v√†o: ${widget.selectedItems}');
    _loadUserInfo();
  }

  Future<void> _loadUserInfo() async {
    print("UID hi·ªán t·∫°i: ${FirebaseAuth.instance.currentUser?.uid}"); // üëà Th√™m ·ªü ƒë√¢y
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;
    try {
      final snapshot = await FirebaseFirestore.instance.collection('users').doc(user.uid).get();
      if (snapshot.exists && snapshot.data() != null) {
        setState(() => userData = snapshot.data());
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('L·ªói t·∫£i th√¥ng tin ng∆∞·ªùi d√πng: $e')),
      );
    }
  }

  Future<void> _submitOrders() async {
    setState(() => _isSubmitting = true);
    try {
      final buyProductsService = BuyProductsService();
      await buyProductsService.createOrders(
        selectedItems: widget.selectedItems,
        paymentMethod: 'Thanh to√°n khi nh·∫≠n h√†ng',
      );
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('‚úÖ ƒê·∫∑t h√†ng th√†nh c√¥ng!'), backgroundColor: Colors.green),
      );

      Navigator.pushAndRemoveUntil(
        context,
        MaterialPageRoute(builder: (_) => HomeCustomer()),
            (route) => false,
      );

    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‚ùå L·ªói: $e'), backgroundColor: Colors.red),
      );
    } finally {
      setState(() => _isSubmitting = false);
    }
  }


  double get total => widget.selectedItems.fold<double>(
    0,
        (sum, item) => sum + ((item['totalAmount'] ?? 0) as num).toDouble(),
  );


  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Scaffold(
      appBar: AppBar(
        title: const Text('X√°c nh·∫≠n ƒë∆°n h√†ng'),
        actions: [
          IconButton(
            icon: const Icon(Icons.edit),
            onPressed: () async {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (_) => EditInformationForOrderScreen(),
                ),
              ).then((_) {
                _loadUserInfo(); // load l·∫°i th√¥ng tin sau khi s·ª≠a
              });
            },
          ),

        ],
      ),
      body: userData == null
          ? const Center(
        child: CircularProgressIndicator(),
      )
          : Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Expanded(
              child: SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Card(
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                      elevation: 2,
                      child: ListTile(
                        leading: const Icon(Icons.person, size: 36),
                        title: Text(userData?['name'] ?? 'Ch∆∞a c√≥'),
                        subtitle: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text('ƒê·ªãa ch·ªâ: ${userData?['address'] ?? 'Ch∆∞a c√≥'}'),
                            Text('SƒêT: ${userData?['phone'] ?? 'Ch∆∞a c√≥'}'),
                          ],
                        ),
                      ),
                    ),
                    const SizedBox(height: 16),
                    const Text('S·∫£n ph·∫©m ƒë√£ ch·ªçn', style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
                    const SizedBox(height: 8),
                    ...widget.selectedItems.map(
                          (item) => Card(
                        margin: const EdgeInsets.symmetric(vertical: 6),
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
                        elevation: 2,
                        child: ListTile(
                          leading: ClipRRect(
                            borderRadius: BorderRadius.circular(8),
                            child: Image.network(
                              item['productImage'] ?? '',
                              width: 50,
                              height: 50,
                              fit: BoxFit.cover,
                              errorBuilder: (_, __, ___) => const Icon(Icons.image, size: 50),
                            ),
                          ),
                          title: Text(item['productName'] ?? ''),
                          subtitle: Text(
                              'SL: ${item['quantity']}\nƒê∆°n gi√°: ${message.formatCurrency((item['price'] ?? 0) as num)}'
                          ),
                          trailing: Text(
                            message.formatCurrency(item['totalAmount']),
                            style: const TextStyle(fontWeight: FontWeight.bold, color: Colors.red),
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(height: 16),
                    Card(
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                      elevation: 2,
                      child: Padding(
                        padding: const EdgeInsets.all(12.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text('Ph∆∞∆°ng th·ª©c thanh to√°n', style: TextStyle(fontWeight: FontWeight.bold)),
                            const SizedBox(height: 8),
                            DropdownButton<String>(
                              value: paymentMethod,
                              isExpanded: true,
                              items: const [
                                DropdownMenuItem(
                                  value: 'Thanh to√°n khi nh·∫≠n h√†ng',
                                  child: Text('Thanh to√°n khi nh·∫≠n h√†ng'),
                                ),
                                DropdownMenuItem(
                                  value: 'Chuy·ªÉn kho·∫£n ng√¢n h√†ng',
                                  child: Text('Chuy·ªÉn kho·∫£n ng√¢n h√†ng'),
                                ),
                              ],
                              onChanged: (value) => setState(() => paymentMethod = value!),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 10),
            Card(
              elevation: 4,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        const Text('T·ªïng c·ªông:', style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
                        Text(message.formatCurrency(total), style: const TextStyle(fontSize: 16, color: Colors.red)),
                      ],
                    ),
                    const SizedBox(height: 12),
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton(
                        style: ElevatedButton.styleFrom(padding: const EdgeInsets.symmetric(vertical: 14)),
                        onPressed: _isSubmitting
                            ? null
                            : () async {
                          if (paymentMethod == 'Chuy·ªÉn kho·∫£n ng√¢n h√†ng') {
                            final stripeService = StripePaymentService();
                            if (total < 13000) {
                              message.showSnackbarfalse(context, "CH·ªà √ÅP D·ª§NG V·ªöI ƒê∆†N H√ÄNG C√ì GI√Å TR·ªä T·ª™ 13.000 VND TR·ªû L√äN");
                              return;
                            }
                            final success = await stripeService.processPayment(total);
                            if (success) {
                              // ‚úÖ L∆∞u ƒë∆°n h√†ng v√†o Firestore
                              final buyProductsService = BuyProductsService();
                              await buyProductsService.createOrders(
                                selectedItems: widget.selectedItems,
                                paymentMethod: 'Chuy·ªÉn kho·∫£n ng√¢n h√†ng',
                              );
                              message.showSnackbartrue(context, 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n v√† thanh to√°n th√†nh c√¥ng');
                              Navigator.pushAndRemoveUntil(
                                context,
                                MaterialPageRoute(builder: (_) => HomeCustomer()),
                                    (route) => false,
                              );
                            } else {
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                  content: Text('B·∫°n ch∆∞a ho√†n t·∫•t thanh to√°n'),
                                  backgroundColor: Colors.red,
                                ),
                              );
                            }
                          }
                          else {
                            await _submitOrders(); // COD
                          }
                        },
                        child: _isSubmitting
                            ? const CircularProgressIndicator(color: Colors.white)
                            : const Text('ƒê·∫∂T H√ÄNG', style: TextStyle(fontSize: 16)),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
