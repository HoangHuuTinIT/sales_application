/**
 * üìå index.js
 * Cloud Functions Gen 2 v·ªõi PubSub Schedule
 */

const { onSchedule } = require('firebase-functions/v2/scheduler');
const { onRequest } = require('firebase-functions/v2/https');
const { initializeApp } = require('firebase-admin/app');
const { getFirestore, Timestamp } = require('firebase-admin/firestore');
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY); // üîë Thay b·∫±ng secret key th·∫≠t c·ªßa b·∫°n

initializeApp(); // ‚úÖ G·ªçi 1 l·∫ßn duy nh·∫•t ·ªü ƒë·∫ßu file

// üïí T·ª± ƒë·ªông c·∫≠p nh·∫≠t ƒë∆°n h√†ng
exports.autoUpdateOrderStatus = onSchedule(
  {
    schedule: 'every 24 hours',
    timeZone: 'Asia/Ho_Chi_Minh',
  },
  async (event) => {
    const db = getFirestore();
    const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);

    const snapshot = await db
      .collection('OrderedProducts')
      .where('status', '==', 'ƒêang ch·ªù x√°c nh·∫≠n')
      .where('createdAt', '<=', Timestamp.fromDate(oneDayAgo))
      .get();

    if (snapshot.empty) {
      console.log('‚úÖ Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o c·∫ßn c·∫≠p nh·∫≠t.');
      return null;
    }

    const batch = db.batch();
    snapshot.forEach((doc) => {
      batch.update(doc.ref, { status: 'ƒê√£ x√°c nh·∫≠n' });
    });

    await batch.commit();
    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${snapshot.size} ƒë∆°n h√†ng.`);

    return null;
  }
);

// üí≥ Stripe PaymentIntent API
exports.createPaymentIntent = onRequest(async (req, res) => {
  try {
    const { amount } = req.body;

    const customer = await stripe.customers.create();

    const ephemeralKey = await stripe.ephemeralKeys.create(
      { customer: customer.id },
      { apiVersion: '2024-04-10' }
    );

    const paymentIntent = await stripe.paymentIntents.create({
      amount,
      currency: 'vnd',
      customer: customer.id,
      automatic_payment_methods: { enabled: true },
    });

    res.send({
      clientSecret: paymentIntent.client_secret,
      customer: customer.id,
      ephemeralKey: ephemeralKey.secret,
    });
  } catch (err) {
    console.error('‚ùå Stripe error:', err);
    res.status(500).send({ error: err.message });
  }
});
//exports.facebookWebhook = onRequest((req, res) => {
//  if (req.method === 'GET') {
//    // D√πng ƒë·ªÉ x√°c minh webhook v·ªõi Facebook
//    const VERIFY_TOKEN = 'webhook_comment_fb'; // üëâ b·∫°n t·ª± ƒë·∫∑t
//    const mode = req.query['hub.mode'];
//    const token = req.query['hub.verify_token'];
//    const challenge = req.query['hub.challenge'];
//
//    if (mode && token === VERIFY_TOKEN) {
//      console.log('üì• Webhook verified!');
//      res.status(200).send(challenge);
//    } else {
//      res.sendStatus(403);
//    }
//  }
//
//  if (req.method === 'POST') {
//    const body = req.body;
//
//    console.log('üì• Nh·∫≠n webhook t·ª´ Facebook:', JSON.stringify(body, null, 2));
//
//    // TODO: X·ª≠ l√Ω comment ·ªü ƒë√¢y (v√≠ d·ª•: l∆∞u v√†o Firestore ho·∫∑c g·ª≠i th√¥ng b√°o...)
//    res.status(200).send('EVENT_RECEIVED');
//  }
//});

